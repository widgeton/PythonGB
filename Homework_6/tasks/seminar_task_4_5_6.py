"""Задача 4. Создайте модуль с функцией внутри. Функция получает на вход загадку, список с возможными
вариантами отгадок и количество попыток на угадывание. Программа возвращает номер попытки, с которой
была отгадана загадка или ноль, если попытки исчерпаны.
   Задача 5. Добавьте в модуль с загадками функцию, которая хранит словарь списков.
Ключ словаря - загадка, значение - список с отгадками. Функция в цикле вызывает загадывающую функцию,
чтобы передать ей все свои загадки.
   Задача 6. Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки)
и число (номер попытки, с которой она угадана). Функция формирует словарь с информацией о результатах
отгадывания. Для хранения используйте защищённый словарь уровня модуля. Отдельно напишите функцию,
которая выводит результаты угадывания из защищённого словаря в удобном для чтения виде. Для формирования
результатов используйте генераторное выражение.
"""
__all__ = ['figure_riddles_out', 'show_results']
_results = {}


def figure_riddle_out(riddle, answers, tries):
    print(riddle)
    for i in range(1, tries + 1):
        guess = input(f'Попытка №{i}. Введите отгадку: ').strip().lower()
        if guess in answers:
            return i
    return 0


def figure_riddles_out():
    tries = 3
    riddles = {'Висит груша - нельзя скушать.': ['лампа', 'лампочка'],
               'Зимой и летом одним цветом.': ['ель', 'елка', 'елочка'],
               'красна девица в темнице, а коса на улице': ['морковь', 'морковка'],
               }
    for riddle, answers in riddles.items():
        attempt = figure_riddle_out(riddle, answers, tries)
        _set_result(riddle, attempt)
        if attempt == 0:
            print('Вы не отгадали')
        else:
            print(f'Вы отгадали с {attempt}-й попытки')


def _set_result(riddle, attempt):
    _results[riddle] = attempt


def show_results():
    print('\n', '\n'.join(f'Загадка "{riddle}" была отгадана с {attempt}-й попытки.'
                          if attempt > 0 else
                          f'Загадка "{riddle}" не была отгадана.'
                          for riddle, attempt in _results.items()), sep='')


if __name__ == '__main__':
    figure_riddles_out()
    show_results()
